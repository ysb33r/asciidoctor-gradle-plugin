/*
 * Copyright 2013-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configurations {
    intTestOfflineRepo.extendsFrom compileOnly
    intTestOfflineRepo2
}

dependencies {
    compileOnly "org.asciidoctor:asciidoctorj:${compileOnlyAsciidoctorJVersion}"
    compileOnly "org.asciidoctor:asciidoctorj-groovy-dsl:${compileOnlyGroovyDslVersion}", {
        exclude module: 'groovy-all'
    }

    compile project(':asciidoctor-gradle-base')

    // This the default jruby-complete version for whichever the default AsciidoctorJ version is
    // If the tests start failing becasue the default was changed, then consider changing this.
    // It is necessary to have this here as we need tests that simply assume the defaults and we
    // need to cater for those offline dependencies.
    intTestOfflineRepo "org.jruby:jruby-complete:9.1.12.0", {
        transitive = false
    }

    intTestOfflineRepo "org.asciidoctor:asciidoctorj-pdf:${downloadOnlyPdfVersion}"
    intTestOfflineRepo "org.asciidoctor:asciidoctorj-epub3:${downloadOnlyEpubVersion}"
    intTestOfflineRepo "org.yaml:snakeyaml:${snakeYamlForJRubyVersion}"

    // This is here for extension testing on the compatibility plugin. It will be deleted
    // when compatibility mode is removed.
    testRuntimeOnly "org.asciidoctor:asciidoctorj-groovy-dsl:${compileOnlyGroovyDslVersion}", {
        exclude module: 'groovy-all'
    }
}

configurePlugin 'org.asciidoctor.jvm.base',
    'AsciidoctorJ Base Plugin',
    'Base plugin for all AsciidoctorJ tasks & extensions. Provides the asciidoctorj project extension.',
    ['asciidoctorj']

configurePlugin 'org.asciidoctor.convert',
    'AsciidoctorJ Compatibility Plugin',
    'Compatibility AsciidoctorJ plugin for those upgrading from 1.5.x',
    ['asciidoctorj', 'html5', 'docbook', 'pdf', 'epub3']

configurePlugin 'org.asciidoctor.jvm.convert',
    'AsciidoctorJ General Purpose Document Conversion Plugin',
    'Provides asciidoctor task and conventions',
    ['asciidoctorj', 'html5', 'docbook']

configurePlugin 'org.asciidoctor.jvm.pdf',
    'AsciidoctorJ PDF Conversion Plugin',
    'Simplifies convesion of asciidoc documetns to PDF',
    ['asciidoctorj', 'pdf']

test {
    systemProperties ROOT_PROJECT_DIR: rootProject.projectDir.absolutePath
    systemProperties TEST_THEMES_DIR: file('src/test/resources/themes')
}

intTest {
    systemProperties TEST_PROJECTS_DIR: file('src/intTest/projects')
}

// Compile the extensions compatibility test with the same version of
// AsciidoctorJ & Groovy version that is used in the project
gradleTest {
    systemProperties ASCIIDOCTORJ_VERSION: compileOnlyAsciidoctorJVersion
    systemProperties GROOVY_VERSION: GroovySystem.version

    gradleArguments '-i'
}

// Adding a third test set so that remote execution can be tested using a separate classpath
// and conditions
sourceSets {
    remoteTest {
        compileClasspath = sourceSets.main.output +  configurations.remoteTestCompile
        runtimeClasspath = output + compileClasspath + configurations.remoteTestRuntime
    }
}

dependencies {
    remoteTestCompile "org.asciidoctor:asciidoctorj:${compileOnlyAsciidoctorJVersion}"
    remoteTestCompile project(':testfixtures-jvm')
    remoteTestRuntime "org.asciidoctor:asciidoctorj-groovy-dsl:${compileOnlyGroovyDslVersion}", {
        exclude module: 'groovy-all'
    }
}

task remoteTest(type: Test) {
    description = "Run tests for the remote-execution code"
    group = "verification"

    mustRunAfter "test"
    inputs.files sourceSets.main.output.classesDirs
    inputs.files sourceSets.main.output.resourcesDir

    testClassesDirs = sourceSets.remoteTest.output.classesDirs
    classpath = sourceSets.remoteTest.runtimeClasspath

    dependsOn ':testfixtures-offline-repo:buildOfflineRepositories'
    systemProperties OFFLINE_REPO: offlineRepoRoot.absolutePath
}

check {
    dependsOn remoteTest
}

pluginManager.withPlugin('jacoco') {
    jacocoTestReport {
        executionData remoteTest
        mustRunAfter remoteTest
    }
}

// This makes it easier to edit the projects in IntelliJ
sourceSets {
    gradleTestProjectExtension {
        groovy {
            srcDirs = ['src/gradleTest/extension-in-subproject/extension/src/main/groovy']
        }
    }
}

configurations {
    gradleTestProjectExtensionCompileOnly.extendsFrom compileOnly
}
